AWSTemplateFormatVersion: "2010-09-09"
Description: "ACD_2.0"
Parameters:

  VpcCIDR:
    Default: 10.16.0.0/16
    Description: "The CIDR block for the VPC"
    Type: String
    AllowedValues:
      - 10.16.0.0/16

  SubnetCIDR:
    Default: 10.16.10.0/24
    Description: "CIDR for public subnet"
    Type: String
    AllowedValues:
      - 10.16.10.0/24

  LabUserId:
    Default: arn:aws:sts:012345678-assumed-role/vocareum-role/username
    Description: "session user ARN"
    Type: String

  KeyName:
    Description: Amazon EC2 Key Pair
    Type: "AWS::EC2::KeyPair::KeyName"

Resources:

  RoleForAllLambdas:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: RoleForAllLambdas
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: lambdaPolicyForAllLambdaSteps
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:*'
                  - 's3:*'
                Resource: '*'

  RoleForStepToCreateAReport:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: RoleForStepToCreateAReport
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: stepPolicyForCreateReport
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:*'
                  - 'logs:*'
                Resource: '*'

  RoleForAPIGWToTriggerStep:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: RoleForAPIGWToTriggerStep
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /

  myDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "product_name"
          AttributeType: "S"
        -
          AttributeName: "special"
          AttributeType: "N"
      KeySchema:
        -
          AttributeName: "product_name"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: "FoodProducts"
      GlobalSecondaryIndexes:
        -
          IndexName: "special_GSI"
          KeySchema:
            -
              AttributeName: "special"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: "1"
            WriteCapacityUnits: "1"

  ApiGatewayMethodPOST:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      # AuthorizationType: COGNITO_USER_POOLS
      # AuthorizerId: !Ref ApiGatewayAuth
      HttpMethod: POST
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              #method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: |
                                {
                                "message_str": "report requested, check your phone shortly."
                                }
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      ResourceId: !Ref ApiGatewayResource3
      RestApiId: !Ref ApiGatewayRestApi
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
            #method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels:
            application/json: Empty

  ApiGatewayMethodOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref ApiGatewayResource3
      RestApiId: !Ref ApiGatewayRestApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !Sub "'https://${S3Bucket}.s3-${AWS::Region}.amazonaws.com'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: true
          StatusCode: '200'

  ApiGatewayMethodGET:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaProducts.Arn}/invocations
        Credentials: !GetAtt LambdaRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      ResourceId: !Ref ApiGatewayResource1
      RestApiId: !Ref ApiGatewayRestApi
      RequestParameters:
            method.request.querystring.product_id: false
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: Empty

  ApiGatewayMethodGET2:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaProducts.Arn}/invocations
        Credentials: !GetAtt LambdaRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json:  |
            {
              "path": "$context.resourcePath"
            }
      ResourceId: !Ref ApiGatewayResource2
      RestApiId: !Ref ApiGatewayRestApi
      RequestParameters:
            method.request.querystring.product_id: false
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: Empty

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'prod'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethodOPTIONS
      - ApiGatewayMethodGET
      - ApiGatewayMethodGET2
    Properties:
      Description: Mock API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: "ProductsApi"

  ApiGatewayResource1:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'products'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResource2:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayResource1
      PathPart: 'on_offer'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResource3:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'create_report'
      RestApiId: !Ref ApiGatewayRestApi

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: false
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          Action:
            - s3:GetObject
          Effect: Allow
          Principal: "*"
          Resource:
            - !Sub "arn:aws:s3:::${S3Bucket}/*"
            - !Sub "arn:aws:s3:::${S3Bucket}"
          Condition:
            IpAddress:
              aws:SourceIp:
                - 0.0.0.0/32

  CloudVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
       - Key: Name
         Value: "Cloud9 VPC"

  subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
     VpcId: !Ref CloudVPC
     AvailabilityZone:
      Fn::Select:
      - 0
      - Fn::GetAZs: ''
     CidrBlock: !Ref SubnetCIDR
     MapPublicIpOnLaunch: true
     Tags:
      - Key: Name
        Value: "Cloud9 subnet"

  IGW:
    Type: "AWS::EC2::InternetGateway"
    DependsOn: CloudVPC

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    DependsOn:
      - CloudVPC
      - IGW
    Properties:
     VpcId: !Ref CloudVPC
     InternetGatewayId: !Ref IGW

  ec2RouteTable:
    Type: "AWS::EC2::RouteTable"
    DependsOn:
      - CloudVPC
      - AttachGateway
    Properties:
      VpcId: !Ref CloudVPC
      Tags:
        - Key: Name
          Value: CloudVPCRouteTable

  routeOut:
    Type: "AWS::EC2::Route"
    DependsOn:
      - ec2RouteTable
      - AttachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref ec2RouteTable

  SubnetRouteAssociate:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn:
      - ec2RouteTable
      - subnet
    Properties:
      RouteTableId: !Ref ec2RouteTable
      SubnetId: !Ref subnet

  NewCloud9:
    Type: "AWS::Cloud9::EnvironmentEC2"
    Properties:
      InstanceType: t2.micro
      ImageId: amazonlinux-2023-x86_64
      SubnetId: !Ref subnet
      OwnerArn: !Ref LabUserId
      Name: "Cloud9 Instance"

  LambdaProducts:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda Function For Products
      FunctionName: get_all_products
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.11
      Code:
        ZipFile: |
          import boto3, json
          from boto3.dynamodb.conditions import Key
          from boto3.dynamodb.conditions import Key, Attr, Not

          TABLE_NAME_STR = 'FoodProducts'
          INDEX_NAME_STR = 'special_GSI'
          DDB = boto3.resource('dynamodb', region_name='us-east-1')

          def lambda_handler(event, context):

              offer_path_str = event.get('path')
              if offer_path_str is not None:
                  return scan_index(event, context)
              else:
                  pass
              print("running scan on table")

              DDB = boto3.resource('dynamodb', region_name='us-east-1')
              TABLE = DDB.Table(TABLE_NAME_STR)
              response = TABLE.scan()
              data = response['Items']

              while 'LastEvaluatedKey' in response:
                  response = TABLE.scan(ExclusiveStartKey=response['LastEvaluatedKey'])
                  print("We needed to paginate and extend the response")
                  data.extend(response['Items'])

              #python return non standard JSON
              #so we need a helper to convet Decimal('595') and special returned by dynamo
              #to an integer like 595
              for item in data:
                 item['price_in_cents_int'] = item.pop('price_in_cents')
                 if item.get('special') is not None:
                   item['special_int'] = item.pop('special')
                 item['tag_str_arr'] = item.pop('tags')
                 item['description_str'] = item.pop('description')
                 item['product_name_str'] = item.pop('product_name')
                 item['product_id_str'] = item.pop('product_id')

                 if item['price_in_cents_int']:
                      item['price_in_cents_int'] = int(item['price_in_cents_int'])
                 if item.get('special_int') is not None:
                      item['special_int'] = int(item['special_int'])

              return_me={"product_item_arr": data}

              return return_me

          def scan_index(event, context):

              print("running scan on index")
              ## event and context not used
              TABLE = DDB.Table(TABLE_NAME_STR)


              response = TABLE.scan(
                  IndexName=INDEX_NAME_STR,
                  FilterExpression=Not(Attr("tags").contains("out of stock"))
              )

              data = response['Items']

              while 'LastEvaluatedKey' in response:
                  response = TABLE.scan(
                      ExclusiveStartKey=response['LastEvaluatedKey'],
                      IndexName=INDEX_NAME_STR,
                      FilterExpression=Not(Attr("tags").contains("out of stock"))
                  )
                  print("We needed to paginate and extend the response")
                  data.extend(response['Items'])

              #python return non standard JSON
              #so we need a helper to convet Decimal('595') and special returned by dynamo
              #to an integer like 595
              for item in data:
                 item['price_in_cents_int'] = item.pop('price_in_cents')
                 item['special_int'] = item.pop('special')
                 item['tag_str_arr'] = item.pop('tags')
                 item['description_str'] = item.pop('description')
                 item['product_name_str'] = item.pop('product_name')
                 item['product_id_str'] = item.pop('product_id')

                 if item['price_in_cents_int']:
                      item['price_in_cents_int'] = int(item['price_in_cents_int'])
                 if item.get('special_int') is not None:
                      item['special_int'] = int(item['special_int'])
              return_me = {
                  "product_item_arr": data
              }
              return return_me
          #remove this line below once you have tested locally and wish to deploy
          #print(lambda_handler({}, None))

  BuildingLabLambda:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: "Lambda-Policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "dynamodb:*"
              - "cloudwatch:*"
              - "lambda:*"
              - "logs:*"
            Resource: "*"


  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref BuildingLabLambda
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      RoleName: lab7-lambda-role

  MyRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "cafe/node-web-app"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          -
            Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                - "*"
            Action:
              - "ecr:*"

# Lab 7 extras
  # Extra subnet reuired for not only RDS but for Beanstalk
  ExtraSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
     VpcId: !Ref CloudVPC
     AvailabilityZone:
      Fn::Select:
      - 1
      - Fn::GetAZs: ''
     CidrBlock: "10.16.2.0/24"
     MapPublicIpOnLaunch: true
     Tags:
      - Key: Name
        Value: "ExtraSubnetForRds"

# Subnet to Route table association for extra subnet
  ExtraSubnetRouteAssociate:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn:
      - ec2RouteTable
      - ExtraSubnet
    Properties:
      RouteTableId: !Ref ec2RouteTable
      SubnetId: !Ref ExtraSubnet

  # Extra subnet grounp for RDS and Beanstalk
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'Subnets used from rds and beanstalk'
      SubnetIds:
        - !Ref ExtraSubnet
        - !Ref subnet
      Tags:
        -
          Key: Name
          Value: dbsubnetgroup



# VPC security group for RDS
  ClusterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          Description: 'Let the beanstalk ec2s reach reach RDS'
        - CidrIp: "0.0.0.0/0"
          IpProtocol: tcp
          FromPort: 11211
          ToPort: 11211
          Description: 'Allow Cloud 9 network to reach RDS'
      VpcId: !Ref CloudVPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-AuroraClusterSecurityGroup'


  # Serverless Aurora
  # This will get seeded later by a script
  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DatabaseName: suppliers
      DBClusterIdentifier: "supplierDB"
      Engine: aurora-mysql
      EngineMode: serverless
      EngineVersion: "5.7.mysql_aurora.2.11.1"
      MasterUsername: "admin"
      MasterUserPassword: "coffee_beans_for_all"
      ScalingConfiguration:
        MinCapacity: 1
        MaxCapacity: 64
        SecondsUntilAutoPause: 7200
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !GetAtt ClusterSecurityGroup.GroupId
      EnableHttpEndpoint: 'true'
      AvailabilityZones:
        - Fn::Select:
          - 0
          - Fn::GetAZs: ''
        - Fn::Select:
          - 1
          - Fn::GetAZs: ''
      Tags:
        - Key: "Name"
          Value: "supplierDB"
    DependsOn:
      - DBSubnetGroup

  DescribeSolutionStacksRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeElasticBeanstalkSolutionStacks
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: elasticbeanstalk:ListAvailableSolutionStacks
                Effect: Allow
                Resource: "*"

  GetLatestSolutionStack:
    Type: AWS::Lambda::Function
    DependsOn:
    - DescribeSolutionStacksRole
    Properties:
      Description: Query the appropriate SolutionStacks value for Elastic Beanstalk.
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt DescribeSolutionStacksRole.Arn
      Runtime: python3.11
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import logging

          def handler(event, context):
              # configure logging
              logger = logging.getLogger()
              logger.setLevel(logging.INFO)
              logger.info('Received event: {}'.format(json.dumps(event)))

              #Assuming failure by default
              response_status = cfnresponse.FAILED

              try:
                client = boto3.client(service_name='elasticbeanstalk')
              except Exception as e:
                logger.error('boto3.client failure: {}'.format(e))
                cfnresponse.send(event, context, response_status, responseData)

              response = client.list_available_solution_stacks()
              #logger.info('Sending responseData: {}'.format(json.dumps(response)))
              responseValue = next(x for x in response['SolutionStacks'] if x.startswith('64bit Amazon Linux 2 v') and x.endswith('running Docker'))
              #logger.info('Sending responseData: {}'.format(json.dumps(responseValue)))
              responseData = {}
              responseData['Data'] = responseValue
              response_status = cfnresponse.SUCCESS
              logger.info('Sending responseData: {}'.format(json.dumps(responseData)))
              cfnresponse.send(event, context, response_status, responseData )

  EBInfo:
    Type: Custom::EBInfo
    DependsOn:
    - GetLatestSolutionStack
    Properties:
      ServiceToken: !GetAtt GetLatestSolutionStack.Arn

  BeanstalkInstancePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: "aws-elasticbeanstalk-ec2-instance-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - ecr:GetAuthorizationToken
            Resource: "*"
          - Effect: "Allow"
            Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
            Resource: "*"
          - Effect: "Allow"
            Action:
              - elasticbeanstalk:Put*
            Resource: "*"

  BeanstalkInstanceRole:
    Type: AWS::IAM::Role
    DependsOn:
      - BeanstalkInstancePolicy
    Properties:
      ManagedPolicyArns:
        - !Ref BeanstalkInstancePolicy
        # addded next 3 lines to test - awsmira
#        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier
#        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier
#        - arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      RoleName: aws-elasticbeanstalk-ec2-role

  #Added instance profile - not automatically created like in console
  BeanstalkInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn:
      - BeanstalkInstanceRole
    Properties:
      InstanceProfileName: "aws-elasticbeanstalk-ec2-role"
      Path: "/"
      Roles:
        - "aws-elasticbeanstalk-ec2-role"

  BeanstalkApp:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: MyNodeApp
      Description: "Beanstalk application for containers"

  BeanstalkEnvOne:
    Type: AWS::ElasticBeanstalk::Environment
    DependsOn:
      - ClusterSecurityGroup
      - RDSCluster
      - ExtraSubnet
      - subnet
      - BeanstalkApp
      - MemcachedCluster
    Properties:
      ApplicationName: MyNodeApp
      Description: "Environment for my node app"
      EnvironmentName: 'MyEnv'
      OptionSettings:
        #leave this first namespace it will be a LaunchTemplate with the DisableIMDSv1
        - Namespace: "aws:autoscaling:launchconfiguration"
          OptionName: "IamInstanceProfile"
          Value: "aws-elasticbeanstalk-ec2-role"
        - Namespace: aws:ec2:vpc
          OptionName: Subnets
          Value: !Join [ ",", [ !Ref ExtraSubnet, !Ref subnet ] ]
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "APP_DB_HOST"
          Value: !GetAtt RDSCluster.Endpoint.Address
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "MEMC_HOST"
          Value: !Sub ${MemcachedCluster.ConfigurationEndpoint.Address}:11211
        #Force LaunchTemplate even if other namespace above says launchconfiguration
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: DisableIMDSv1
          Value: true
      SolutionStackName: !GetAtt EBInfo.Data
      # 64bit Amazon Linux 2 v3.4.0 running Docker"
      Tier:
        Name: WebServer
        Type: Standard

  MemcachedClusterSubnetGroup:
    DependsOn:
      - ExtraSubnet
      - subnet
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      CacheSubnetGroupName: "MyMemcachedSubnet"
      Description: "The subnets used for Memcached"
      SubnetIds:
        - !Ref ExtraSubnet
        - !Ref subnet

  MemcachedCluster:
    DependsOn:
      - ClusterSecurityGroup
      - RDSCluster
      - ExtraSubnet
      - subnet
      - MemcachedClusterSubnetGroup
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      AZMode: "cross-az"
      CacheNodeType: "cache.m6g.large"
      CacheSubnetGroupName: "MyMemcachedSubnet"
      ClusterName: "Memcached"
      Engine: "Memcached"
      EngineVersion: "1.6.6"
      NumCacheNodes: "3"
      Port: "11211"
      PreferredAvailabilityZones:
        - "us-east-1a"
        - "us-east-1b"
        - "us-east-1b"
      VpcSecurityGroupIds:
        - !GetAtt ClusterSecurityGroup.GroupId

Outputs:
  ClusterEndpoint:
    Description: 'Aurora Cluster/Writer Endpoint'
    Value: !GetAtt 'RDSCluster.Endpoint.Address'
